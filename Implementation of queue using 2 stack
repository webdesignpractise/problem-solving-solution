Method 1: making pop operation costly
--------------------------------------
Stack<Integer> s1 = new Stack<Integer>();
    Stack<Integer> s2 = new Stack<Integer>();

    //Function to push an element in queue by using 2 stacks.
    void Push(int x)
    {
	   // Your code here
	   s1.push(x);
    }
	
    
    //Function to pop an element from queue by using 2 stacks.
    int Pop()
    {
	   // Your code here
	   int res=-1;
	   while(s1.size()>1)s2.push(s1.pop());
	   if(s1.isEmpty()==false)
	    res=s1.pop();
	   while(!s2.isEmpty())s1.push(s2.pop());
	   return res;
    }
    
    Time Complexity :
    push-> O(1) 
    pop-> Theta(n)
    
Method 2: making push operation costly
--------------------------------------

    Stack<Integer> s1 = new Stack<Integer>();
    Stack<Integer> s2 = new Stack<Integer>();

    //Function to push an element in queue by using 2 stacks.
    void Push(int x)
    {
	   // Your code here
	   while(s1.isEmpty()==false)s2.push(s1.pop());
	   s1.push(x);
	   while(s2.isEmpty()==false)s1.push(s2.pop());
    }
	
    
    //Function to pop an element from queue by using 2 stacks.
    int Pop()
    {
	   // Your code here
	   int res=-1;
	   
	   if(s1.isEmpty()==false)
	    res=s1.pop();
	   
	   return res;
    }
    
    
    
    
