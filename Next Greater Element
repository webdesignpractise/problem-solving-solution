Method 1:(Naive approach)
--------------------------
public static long[] nextLargerElement(long[] arr, int n)
    { 
        // Your code here
        long res[]=new long[n];
        res[n-1]=-1;
        for(int i=n-2;i>=0;i--)
        {
            boolean flag=false;
            for(int j=i+1;j<n;j++)
            {
                if(arr[j]>=arr[i])
                {
                    flag=true;
                    res[i]=arr[j];
                    break;
                }
            }
            
            if(flag==false)
                res[i]=-1;
        }
        return res;
        
        
    } 
 //Time Complexity O(n2) Space Complexity O(1)
 
 Method 2: (Effiecient Approach)
 -------------------------------
 public static long[] nextLargerElement(long[] arr, int n)
    { 
        // Your code here
        long res[]=new long[n];
        res[n-1]=-1;
        Deque<Long> s=new ArrayDeque<Long>();
        s.push(arr[n-1]);
        for(int i=n-2;i>=0;i--)
        {
            while(s.isEmpty()==false && s.peek()<=arr[i])s.pop();
            
            if(s.isEmpty())
                res[i]=-1;
            else
                res[i]=s.peek();
            s.push(arr[i]);
        }
        return res;
        
    } 
    
//Time Complexity Theta(n) Space Complexity O(n)
